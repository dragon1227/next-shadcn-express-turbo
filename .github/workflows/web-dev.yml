# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE when there is a push to the "main" branch.
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Create and configure a Workload Identity Provider for GitHub (https://github.com/google-github-actions/auth#setting-up-workload-identity-federation)
#
# 3. Change the values for the GAR_LOCATION, GKE_ZONE, GKE_CLUSTER, IMAGE, REPOSITORY and DEPLOYMENT_NAME environment variables (below).
#
# For more support on how to run the workflow, please visit https://github.com/google-github-actions/setup-gcloud/tree/master/example-workflows/gke-kustomize

name: DEV-WEB

on:
  push:
    branches: [ "main" ]
    paths:
      - apps/web/*
      - packages/types/*
      - packages/utils/*
      - packages/ui/*
      - .github/workflows/web-dev.yml
      - .kubernetes/web/*

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GAR_LOCATION: ${{vars.GAR_LOCATION}}
  GKE_CLUSTER: ${{vars.GKE_CLUSTER}}
  GKE_ZONE: ${{vars.GKE_LOCATION}}
  DEPLOYMENT_NAME: web
  REPOSITORY: ${{vars.GAR_REPOSITORY}}
  IMAGE: web
  NEXT_PUBLIC_API_URL: "https://<YOUR-DOMAIN.com>"

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: development

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    # Configure Workload Identity Federation and generate an access token.
    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v0'
      with:
        token_format: 'access_token'
        credentials_json: ${{secrets.GCP_CREDENTIALS}}

    - name: Docker configuration
      run: |-
        echo ${{steps.auth.outputs.access_token}} | docker login -u oauth2accesstoken --password-stdin https://$GAR_LOCATION-docker.pkg.dev
    # Get the GKE credentials so we can deploy to the cluster
    - name: Set up GKE credentials
      uses: google-github-actions/get-gke-credentials@v0
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}

    # Build the Docker image
    - name: Build
      run: |-
        docker build \
          --tag "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" \
          --build-arg NEXT_PUBLIC_API_URL="$NEXT_PUBLIC_API_URL" \
          -f ./apps/web/Dockerfile \
          .
    # Push the Docker image to Google Artifact Registry
    - name: Publish
      run: |-
        docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA"
    # Set up kustomize
    - name: Set up Kustomize
      working-directory: .kubernetes
      run: |-
        curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
        chmod u+x ./kustomize
      # Deploy the Docker image to the GKE cluster
    - name: Config
      working-directory: .kubernetes
      run: |-
        # replacing the image name in the k8s template
        ./kustomize build . | kubectl apply -f -
        cp ./kustomize ./web
    - name: Generate Secrets
      uses: "DamianReeves/write-file-action@master"
      with:
        path: .kubernetes/web/web-config.yaml
        write-mode: overwrite
        contents: |- # Generate secrets
          apiVersion: v1
          kind: "ConfigMap"
          metadata:
            name: web-config
          data:
            NEXT_PUBLIC_API_URL: "${{env.NEXT_PUBLIC_API_URL}}"
      # Deploy the Docker image to the GKE cluster
    - name: Deploy
      working-directory: .kubernetes/web
      run: |-
        # replacing the image name in the k8s template
        ./kustomize edit set image web=$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA
        ./kustomize build . | kubectl apply -f -
        kubectl rollout status deployment/$DEPLOYMENT_NAME
        kubectl get services -o wide
